from tornado import genfrom framework.config import configfrom framework.actions.module.lockfile import LockFilefrom framework.schedulers.base import BaseSchedulerimport logginglogger = logging.getLogger('default')class StatusScheduler(BaseScheduler):    _modules_status = None    @classmethod    @gen.coroutine    def collect_modules_status(cls):        try:            cls._modules_status = yield LockFile.get_pkg_status()            logger.info('Collected modules status: %s', cls._modules_status)        except Exception as exc:            logger.error('Error while collecting modules status: %s', exc)    @gen.coroutine    def eventloop(self):        while True:            yield gen.sleep(config.get('heartbeat', 30) / 2)            yield self.collect_modules_status()    @classmethod    @gen.coroutine    def get_modules_status(cls):        if cls._modules_status is None:            yield cls.collect_modules_status()        raise gen.Return(cls._modules_status)