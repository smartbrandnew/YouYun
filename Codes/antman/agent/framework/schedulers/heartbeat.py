import osimport psutilfrom tornado import genfrom framework.config import configfrom framework.message.models import Messagefrom framework.message.type import MessageTypefrom framework.message.transfers import get_current_transferfrom framework.schedulers.base import BaseSchedulerfrom framework.schedulers.status import StatusSchedulerimport logginglogger = logging.getLogger('default')class HeartbeatScheduler(BaseScheduler):    def __init__(self):        self._proc = psutil.Process(os.getpid())    @gen.coroutine    def get_index(self):        memory_info = self._proc.memory_info()        modules_status = yield StatusScheduler.get_modules_status()        index = {            'rss': memory_info.rss,            'vms': memory_info.vms,            'cpu': self._proc.cpu_percent(),            'modules_status': modules_status        }        raise gen.Return(index)    @gen.coroutine    def eventloop(self):        while True:            try:                index = yield self.get_index()                body = {'id': config['id']}                body.update(index)                message = Message.create(MessageType.HEARTBEAT, body)                transfer = get_current_transfer()                logger.info('Sending heartbeat with index: %s', index)                yield transfer.send(message)            except Exception as exc:                logger.error('Error while sending heartbeat: %s', exc)            yield gen.sleep(config.get('heartbeat', 30))