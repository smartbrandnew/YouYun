<?xml version="1.0" encoding="UTF-8"?>
<pmdb-map>
	<monitor type="HTTP" >
		<!-- 
		HTTP-1	响应时间	秒
		 -->	
		<object local="resource" remote="HTTPService" states="SUCCESSED,FAILED,OVERSTEP">
		<![CDATA[
			def state = input.getValue("monitor.state");
			if (state == com.broada.carrier.monitor.server.api.entity.MonitorState.SUCCESSED
				|| state == com.broada.carrier.monitor.server.api.entity.MonitorState.OVERSTEP)					
				state = 1;	
			else if (state == com.broada.carrier.monitor.server.api.entity.MonitorState.FAILED)
				state = 0;
			else
				state = null;
			if (state != null)
				output.setValue(input, "state.available_status", state);
			
			if (input.instance != null) {
				def value = input.getValue("perf.HTTP-1");
				if (value != null)
					output.setValue(input, "perf.http.response_time", value);
			}
			
			def param = input.task.getParameterObject(com.broada.carrier.monitor.impl.stdsvc.http.HTTPParameter.class);
			if (param != null) {
				output.setValue(input, "attr.usePort", param.port);
				output.setValue(input, "attr.httpServiceProtocol", "protocol_http");				
			}
		]]>			
		</object>
	</monitor>
	
	<monitor type="HTTPS" >
		<!-- 
		HTTPS-1	响应时间	秒
		 -->	
		<object local="resource" remote="HTTPService" states="SUCCESSED,FAILED,OVERSTEP">
		<![CDATA[
			def state = input.getValue("monitor.state");
			if (state == com.broada.carrier.monitor.server.api.entity.MonitorState.SUCCESSED
				|| state == com.broada.carrier.monitor.server.api.entity.MonitorState.OVERSTEP)					
				state = 1;	
			else if (state == com.broada.carrier.monitor.server.api.entity.MonitorState.FAILED)
				state = 0;
			else
				state = null;
			if (state != null)
				output.setValue(input, "state.available_status", state);
			
			if (input.instance != null) {
				def value = input.getValue("perf.HTTPS-1");
				if (value != null)
					output.setValue(input, "perf.http.response_time", value);
			}
			
			def param = input.task.getParameterObject(com.broada.carrier.monitor.impl.stdsvc.http.HTTPSParameter.class);
			if (param != null) {
				output.setValue(input, "attr.usePort", param.port);
				output.setValue(input, "attr.httpServiceProtocol", "protocol_https");				
			}
		]]>			
		</object>
	</monitor>
	
	<monitor type="FTP" >
		<!-- 
		FTP-1	响应时间	毫秒
		 -->	
		<object local="resource" remote="FTPService" states="SUCCESSED,FAILED,OVERSTEP">
		<![CDATA[
			def state = input.getValue("monitor.state");
			if (state == com.broada.carrier.monitor.server.api.entity.MonitorState.SUCCESSED
				|| state == com.broada.carrier.monitor.server.api.entity.MonitorState.OVERSTEP)					
				state = 1;	
			else if (state == com.broada.carrier.monitor.server.api.entity.MonitorState.FAILED)
				state = 0;
			else
				state = null;
			if (state != null)
				output.setValue(input, "state.available_status", state);
			
			if (input.instance != null) {
				def value = input.getValue("perf.FTP-1");
				if (value != null)
					output.setValue(input, "perf.ftp.response_time", value);
			}
			
			def param = input.task.getParameterObject(com.broada.carrier.monitor.impl.stdsvc.ftp.FTPParameter.class);
			if (param != null) {
				output.setValue(input, "attr.usePort", param.port);
			}
		]]>			
		</object>
	</monitor>	
	
	<monitor type="POP3" >
		<!-- 
		POP3-1	响应时间	秒
		 -->	
		<object local="resource" remote="MailService" states="SUCCESSED,FAILED,OVERSTEP">
		<![CDATA[
			def state = input.getValue("monitor.state");
			if (state == com.broada.carrier.monitor.server.api.entity.MonitorState.SUCCESSED
				|| state == com.broada.carrier.monitor.server.api.entity.MonitorState.OVERSTEP)					
				state = 1;	
			else if (state == com.broada.carrier.monitor.server.api.entity.MonitorState.FAILED)
				state = 0;
			else
				state = null;
			if (state != null)
				output.setValue(input, "state.available_status", state);
			
			if (input.instance != null) {
				def value = input.getValue("perf.POP3-1");
				if (value != null)
					output.setValue(input, "perf.mail.response_time", value);
				else
					output.setValue(input, "perf.mail.response_time", 0.0030);
			}
		]]>			
		</object>
	</monitor>		
	
	<monitor type="DNS" >
		<!-- 
		DNS-1	响应时间	毫秒
		 -->	
		<object local="resource" remote="DNSService" states="SUCCESSED,FAILED,OVERSTEP">
			<item local="monitor.state" remote="state.available_status" function="monitorState2availableStatus"/>			
			<item local="perf.DNS-1" remote="perf.dns.response_time" />		
		</object>
	</monitor>	
	
</pmdb-map>